//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShortcutRelay.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetShortcutList", ReplyAction="http://tempuri.org/IService1/GetShortcutListResponse")]
        ShortcutRelayService.ShortcutData[] GetShortcutList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetShortcutList", ReplyAction="http://tempuri.org/IService1/GetShortcutListResponse")]
        System.Threading.Tasks.Task<ShortcutRelayService.ShortcutData[]> GetShortcutListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActivateShortcut", ReplyAction="http://tempuri.org/IService1/ActivateShortcutResponse")]
        void ActivateShortcut(string shortcutText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActivateShortcut", ReplyAction="http://tempuri.org/IService1/ActivateShortcutResponse")]
        System.Threading.Tasks.Task ActivateShortcutAsync(string shortcutText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActivateShortcutByID", ReplyAction="http://tempuri.org/IService1/ActivateShortcutByIDResponse")]
        void ActivateShortcutByID(int shortcutID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActivateShortcutByID", ReplyAction="http://tempuri.org/IService1/ActivateShortcutByIDResponse")]
        System.Threading.Tasks.Task ActivateShortcutByIDAsync(int shortcutID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActivateShortcutByName", ReplyAction="http://tempuri.org/IService1/ActivateShortcutByNameResponse")]
        void ActivateShortcutByName(string shortcutName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActivateShortcutByName", ReplyAction="http://tempuri.org/IService1/ActivateShortcutByNameResponse")]
        System.Threading.Tasks.Task ActivateShortcutByNameAsync(string shortcutName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteShortcut", ReplyAction="http://tempuri.org/IService1/DeleteShortcutResponse")]
        void DeleteShortcut(string shortcutText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteShortcut", ReplyAction="http://tempuri.org/IService1/DeleteShortcutResponse")]
        System.Threading.Tasks.Task DeleteShortcutAsync(string shortcutText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteShortcutByID", ReplyAction="http://tempuri.org/IService1/DeleteShortcutByIDResponse")]
        void DeleteShortcutByID(int shortcutID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteShortcutByID", ReplyAction="http://tempuri.org/IService1/DeleteShortcutByIDResponse")]
        System.Threading.Tasks.Task DeleteShortcutByIDAsync(int shortcutID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteShortcutByName", ReplyAction="http://tempuri.org/IService1/DeleteShortcutByNameResponse")]
        void DeleteShortcutByName(string shortcutName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteShortcutByName", ReplyAction="http://tempuri.org/IService1/DeleteShortcutByNameResponse")]
        System.Threading.Tasks.Task DeleteShortcutByNameAsync(string shortcutName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddShortCut", ReplyAction="http://tempuri.org/IService1/AddShortCutResponse")]
        void AddShortCut(string shortcut, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddShortCut", ReplyAction="http://tempuri.org/IService1/AddShortCutResponse")]
        System.Threading.Tasks.Task AddShortCutAsync(string shortcut, string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ShortcutRelay.ServiceReference2.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ShortcutRelay.ServiceReference2.IService1>, ShortcutRelay.ServiceReference2.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(string value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(string value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public ShortcutRelayService.ShortcutData[] GetShortcutList() {
            return base.Channel.GetShortcutList();
        }
        
        public System.Threading.Tasks.Task<ShortcutRelayService.ShortcutData[]> GetShortcutListAsync() {
            return base.Channel.GetShortcutListAsync();
        }
        
        public void ActivateShortcut(string shortcutText) {
            base.Channel.ActivateShortcut(shortcutText);
        }
        
        public System.Threading.Tasks.Task ActivateShortcutAsync(string shortcutText) {
            return base.Channel.ActivateShortcutAsync(shortcutText);
        }
        
        public void ActivateShortcutByID(int shortcutID) {
            base.Channel.ActivateShortcutByID(shortcutID);
        }
        
        public System.Threading.Tasks.Task ActivateShortcutByIDAsync(int shortcutID) {
            return base.Channel.ActivateShortcutByIDAsync(shortcutID);
        }
        
        public void ActivateShortcutByName(string shortcutName) {
            base.Channel.ActivateShortcutByName(shortcutName);
        }
        
        public System.Threading.Tasks.Task ActivateShortcutByNameAsync(string shortcutName) {
            return base.Channel.ActivateShortcutByNameAsync(shortcutName);
        }
        
        public void DeleteShortcut(string shortcutText) {
            base.Channel.DeleteShortcut(shortcutText);
        }
        
        public System.Threading.Tasks.Task DeleteShortcutAsync(string shortcutText) {
            return base.Channel.DeleteShortcutAsync(shortcutText);
        }
        
        public void DeleteShortcutByID(int shortcutID) {
            base.Channel.DeleteShortcutByID(shortcutID);
        }
        
        public System.Threading.Tasks.Task DeleteShortcutByIDAsync(int shortcutID) {
            return base.Channel.DeleteShortcutByIDAsync(shortcutID);
        }
        
        public void DeleteShortcutByName(string shortcutName) {
            base.Channel.DeleteShortcutByName(shortcutName);
        }
        
        public System.Threading.Tasks.Task DeleteShortcutByNameAsync(string shortcutName) {
            return base.Channel.DeleteShortcutByNameAsync(shortcutName);
        }
        
        public void AddShortCut(string shortcut, string name) {
            base.Channel.AddShortCut(shortcut, name);
        }
        
        public System.Threading.Tasks.Task AddShortCutAsync(string shortcut, string name) {
            return base.Channel.AddShortCutAsync(shortcut, name);
        }
    }
}
